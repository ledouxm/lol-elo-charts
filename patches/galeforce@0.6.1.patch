diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000000000000000000000000000000000000..3272c1647db7be9ea0a007a7494f6601fc85781f
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,11 @@
+{
+  "workbench.colorCustomizations": {
+    "commandCenter.border": "#e7e7e799",
+    "sash.hoverBorder": "#f82599",
+    "titleBar.activeBackground": "#e30780",
+    "titleBar.activeForeground": "#e7e7e7",
+    "titleBar.inactiveBackground": "#e3078099",
+    "titleBar.inactiveForeground": "#e7e7e799"
+  },
+  "peacock.color": "#e30780"
+}
diff --git a/dist/galeforce/interfaces/dto/lol-data-dragon/champion.d.ts b/dist/galeforce/interfaces/dto/lol-data-dragon/champion.d.ts
index fc814c50a4b454cb43f649d44125bb37eec2e494..574b33145ca6b90bdf169b024d5b360bb4116327 100644
--- a/dist/galeforce/interfaces/dto/lol-data-dragon/champion.d.ts
+++ b/dist/galeforce/interfaces/dto/lol-data-dragon/champion.d.ts
@@ -1,139 +1,64 @@
-interface Image {
-    full: string;
-    sprite: string;
-    group: string;
-    x: number;
-    y: number;
-    w: number;
-    h: number;
+export interface DataDragonChampionDTO {
+  type: string;
+  format: string;
+  version: string;
+  data: Data;
 }
-interface Skin {
-    id: string;
-    num: number;
-    name: string;
-    chromas: boolean;
+
+interface Data {
+  [key: string]: Champion;
 }
-interface Info {
-    attack: number;
-    defense: number;
-    magic: number;
-    difficulty: number;
+
+interface Champion {
+  version: string;
+  id: string;
+  key: string;
+  name: string;
+  title: string;
+  blurb: string;
+  info: Info;
+  image: Image;
+  tags: string[];
+  partype: string;
+  stats: Stats;
 }
+
 interface Stats {
-    hp: number;
-    hpperlevel: number;
-    mp: number;
-    mpperlevel: number;
-    movespeed: number;
-    armor: number;
-    armorperlevel: number;
-    spellblock: number;
-    spellblockperlevel: number;
-    attackrange: number;
-    hpregen: number;
-    hpregenperlevel: number;
-    mpregen: number;
-    mpregenperlevel: number;
-    crit: number;
-    critperlevel: number;
-    attackdamage: number;
-    attackdamageperlevel: number;
-    attackspeedperlevel: number;
-    attackspeed: number;
-}
-interface LevelTip {
-    label: string[];
-    effect: string[];
-}
-interface DataValues {
-}
-type Effect = number[] | null;
-type EffectBurn = string | null;
-interface Spell {
-    id: string;
-    name: string;
-    description: string;
-    tooltip: string;
-    leveltip: LevelTip;
-    maxrank: number;
-    cooldown: number[];
-    cooldownBurn: string;
-    cost: number[];
-    costBurn: string;
-    datavalues: DataValues;
-    effect: Effect[];
-    effectBurn: EffectBurn[];
-    vars: any[];
-    costType: string;
-    maxammo: string;
-    range: number[];
-    rangeBurn: string;
-    image: Image;
-    resource: string;
-}
-interface Passive {
-    name: string;
-    description: string;
-    image: Image;
+  hp: number;
+  hpperlevel: number;
+  mp: number;
+  mpperlevel: number;
+  movespeed: number;
+  armor: number;
+  armorperlevel: number;
+  spellblock: number;
+  spellblockperlevel: number;
+  attackrange: number;
+  hpregen: number;
+  hpregenperlevel: number;
+  mpregen: number;
+  mpregenperlevel: number;
+  crit: number;
+  critperlevel: number;
+  attackdamage: number;
+  attackdamageperlevel: number;
+  attackspeedperlevel: number;
+  attackspeed: number;
 }
-interface Item {
-    id: string;
-    count: number;
-    hideCount: boolean;
-}
-interface Block {
-    type: string;
-    recMath: boolean;
-    recSteps: boolean;
-    minSummonerLevel: number;
-    maxSummonerLevel: number;
-    showIfSummonerSpell: string;
-    hideIfSummonerSpell: string;
-    appendAfterSection?: string;
-    visibleWithAllOf?: string[];
-    hiddenWithAnyOf?: string[];
-    items: Item[];
-}
-interface Recommended {
-    champion: string;
-    title: string;
-    map: string;
-    mode: string;
-    type: string;
-    customTag: string;
-    sortrank: number;
-    extensionPage: boolean;
-    useObviousCheckmark?: boolean;
-    customPanel?: null;
-    blocks: Block[];
-}
-interface Champion {
-    id: string;
-    key: string;
-    name: string;
-    title: string;
-    image: Image;
-    skins: Skin[];
-    lore: string;
-    blurb: string;
-    allytips: string[];
-    enemytips: string[];
-    tags: string[];
-    partype: string;
-    info: Info;
-    stats: Stats;
-    spells: Spell[];
-    passive: Passive;
-    recommended: Recommended[];
-}
-interface Data {
-    [key: string]: Champion;
+
+interface Image {
+  full: string;
+  sprite: string;
+  group: string;
+  x: number;
+  y: number;
+  w: number;
+  h: number;
 }
-export interface DataDragonChampionDTO {
-    type: string;
-    format: string;
-    version: string;
-    data: Data;
+
+interface Info {
+  attack: number;
+  defense: number;
+  magic: number;
+  difficulty: number;
 }
-export {};
-//# sourceMappingURL=champion.d.ts.map
\ No newline at end of file
diff --git a/dist/galeforce/interfaces/dto/riot-api/match-v5/match.d.ts b/dist/galeforce/interfaces/dto/riot-api/match-v5/match.d.ts
index f95a4bf0517d7c9e3b40819fa32b506543325936..f0aa98f7edefc7702500f52422d8844e010631ae 100644
--- a/dist/galeforce/interfaces/dto/riot-api/match-v5/match.d.ts
+++ b/dist/galeforce/interfaces/dto/riot-api/match-v5/match.d.ts
@@ -1,197 +1,368 @@
-interface Metadata {
-    dataVersion: string;
-    matchId: string;
-    participants: string[];
-}
-interface StatPerks {
-    defense: number;
-    flex: number;
-    offense: number;
-}
-interface Selection {
-    perk: number;
-    var1: number;
-    var2: number;
-    var3: number;
-}
-interface Style {
-    description: string;
-    selections: Selection[];
-    style: number;
+export interface MatchDTO {
+  metadata: Metadata;
+  info: Info;
 }
-interface Perks {
-    statPerks: StatPerks;
-    styles: Style[];
+
+interface Info {
+  endOfGameResult: string;
+  gameCreation: number;
+  gameDuration: number;
+  gameEndTimestamp: number;
+  gameId: number;
+  gameMode: string;
+  gameName: string;
+  gameStartTimestamp: number;
+  gameType: string;
+  gameVersion: string;
+  mapId: number;
+  participants: Participant[];
+  platformId: string;
+  queueId: number;
+  teams: Team[];
+  tournamentCode: string;
 }
-interface Participant {
-    assists: number;
-    baronKills: number;
-    bountyLevel: number;
-    champExperience: number;
-    champLevel: number;
-    championId: number;
-    championName: string;
-    championTransform: number;
-    consumablesPurchased: number;
-    damageDealtToBuildings: number;
-    damageDealtToObjectives: number;
-    damageDealtToTurrets: number;
-    damageSelfMitigated: number;
-    deaths: number;
-    detectorWardsPlaced: number;
-    doubleKills: number;
-    dragonKills: number;
-    firstBloodAssist: boolean;
-    firstBloodKill: boolean;
-    firstTowerAssist: boolean;
-    firstTowerKill: boolean;
-    gameEndedInEarlySurrender: boolean;
-    gameEndedInSurrender: boolean;
-    goldEarned: number;
-    goldSpent: number;
-    individualPosition: string;
-    inhibitorKills: number;
-    inhibitorTakedowns: number;
-    inhibitorsLost: number;
-    item0: number;
-    item1: number;
-    item2: number;
-    item3: number;
-    item4: number;
-    item5: number;
-    item6: number;
-    itemsPurchased: number;
-    killingSprees: number;
-    kills: number;
-    lane: string;
-    largestCriticalStrike: number;
-    largestKillingSpree: number;
-    largestMultiKill: number;
-    longestTimeSpentLiving: number;
-    magicDamageDealt: number;
-    magicDamageDealtToChampions: number;
-    magicDamageTaken: number;
-    neutralMinionsKilled: number;
-    nexusKills: number;
-    nexusLost: number;
-    nexusTakedowns: number;
-    objectivesStolen: number;
-    objectivesStolenAssists: number;
-    participantId: number;
-    pentaKills: number;
-    perks: Perks;
-    physicalDamageDealt: number;
-    physicalDamageDealtToChampions: number;
-    physicalDamageTaken: number;
-    profileIcon: number;
-    puuid: string;
-    quadraKills: number;
-    riotIdName: string;
-    riotIdTagline: string;
-    role: string;
-    sightWardsBoughtInGame: number;
-    spell1Casts: number;
-    spell2Casts: number;
-    spell3Casts: number;
-    spell4Casts: number;
-    summoner1Casts: number;
-    summoner1Id: number;
-    summoner2Casts: number;
-    summoner2Id: number;
-    summonerId: string;
-    summonerLevel: number;
-    summonerName: string;
-    teamEarlySurrendered: boolean;
-    teamId: number;
-    teamPosition: string;
-    timeCCingOthers: number;
-    timePlayed: number;
-    totalDamageDealt: number;
-    totalDamageDealtToChampions: number;
-    totalDamageShieldedOnTeammates: number;
-    totalDamageTaken: number;
-    totalHeal: number;
-    totalHealsOnTeammates: number;
-    totalMinionsKilled: number;
-    totalTimeCCDealt: number;
-    totalTimeSpentDead: number;
-    totalUnitsHealed: number;
-    tripleKills: number;
-    trueDamageDealt: number;
-    trueDamageDealtToChampions: number;
-    trueDamageTaken: number;
-    turretKills: number;
-    turretTakedowns: number;
-    turretsLost: number;
-    unrealKills: number;
-    visionScore: number;
-    visionWardsBoughtInGame: number;
-    wardsKilled: number;
-    wardsPlaced: number;
-    win: boolean;
+
+interface Team {
+  bans: Ban[];
+  objectives: Objectives;
+  teamId: number;
+  win: boolean;
 }
-interface Ban {
-    championId: number;
-    pickTurn: number;
+
+interface Objectives {
+  baron: Baron;
+  champion: Baron;
+  dragon: Baron;
+  horde: Baron;
+  inhibitor: Baron;
+  riftHerald: Baron;
+  tower: Baron;
 }
+
 interface Baron {
-    first: boolean;
-    kills: number;
+  first: boolean;
+  kills: number;
 }
-interface Champion {
-    first: boolean;
-    kills: number;
+
+interface Ban {
+  championId: number;
+  pickTurn: number;
 }
-interface Dragon {
-    first: boolean;
-    kills: number;
+
+interface Participant {
+  allInPings: number;
+  assistMePings: number;
+  assists: number;
+  baronKills: number;
+  basicPings: number;
+  bountyLevel: number;
+  challenges: Challenges;
+  champExperience: number;
+  champLevel: number;
+  championId: number;
+  championName: string;
+  championTransform: number;
+  commandPings: number;
+  consumablesPurchased: number;
+  damageDealtToBuildings: number;
+  damageDealtToObjectives: number;
+  damageDealtToTurrets: number;
+  damageSelfMitigated: number;
+  dangerPings: number;
+  deaths: number;
+  detectorWardsPlaced: number;
+  doubleKills: number;
+  dragonKills: number;
+  eligibleForProgression: boolean;
+  enemyMissingPings: number;
+  enemyVisionPings: number;
+  firstBloodAssist: boolean;
+  firstBloodKill: boolean;
+  firstTowerAssist: boolean;
+  firstTowerKill: boolean;
+  gameEndedInEarlySurrender: boolean;
+  gameEndedInSurrender: boolean;
+  getBackPings: number;
+  goldEarned: number;
+  goldSpent: number;
+  holdPings: number;
+  individualPosition: string;
+  inhibitorKills: number;
+  inhibitorTakedowns: number;
+  inhibitorsLost: number;
+  item0: number;
+  item1: number;
+  item2: number;
+  item3: number;
+  item4: number;
+  item5: number;
+  item6: number;
+  itemsPurchased: number;
+  killingSprees: number;
+  kills: number;
+  lane: string;
+  largestCriticalStrike: number;
+  largestKillingSpree: number;
+  largestMultiKill: number;
+  longestTimeSpentLiving: number;
+  magicDamageDealt: number;
+  magicDamageDealtToChampions: number;
+  magicDamageTaken: number;
+  missions: Missions;
+  needVisionPings: number;
+  neutralMinionsKilled: number;
+  nexusKills: number;
+  nexusLost: number;
+  nexusTakedowns: number;
+  objectivesStolen: number;
+  objectivesStolenAssists: number;
+  onMyWayPings: number;
+  participantId: number;
+  pentaKills: number;
+  perks: Perks;
+  physicalDamageDealt: number;
+  physicalDamageDealtToChampions: number;
+  physicalDamageTaken: number;
+  placement: number;
+  playerAugment1: number;
+  playerAugment2: number;
+  playerAugment3: number;
+  playerAugment4: number;
+  playerScore0: number;
+  playerScore1: number;
+  playerScore10: number;
+  playerScore11: number;
+  playerScore2: number;
+  playerScore3: number;
+  playerScore4: number;
+  playerScore5: number;
+  playerScore6: number;
+  playerScore7: number;
+  playerScore8: number;
+  playerScore9: number;
+  playerSubteamId: number;
+  profileIcon: number;
+  pushPings: number;
+  puuid: string;
+  quadraKills: number;
+  riotIdGameName: string;
+  riotIdTagline: string;
+  role: string;
+  sightWardsBoughtInGame: number;
+  spell1Casts: number;
+  spell2Casts: number;
+  spell3Casts: number;
+  spell4Casts: number;
+  subteamPlacement: number;
+  summoner1Casts: number;
+  summoner1Id: number;
+  summoner2Casts: number;
+  summoner2Id: number;
+  summonerId: string;
+  summonerLevel: number;
+  summonerName: string;
+  teamEarlySurrendered: boolean;
+  teamId: number;
+  teamPosition: string;
+  timeCCingOthers: number;
+  timePlayed: number;
+  totalAllyJungleMinionsKilled: number;
+  totalDamageDealt: number;
+  totalDamageDealtToChampions: number;
+  totalDamageShieldedOnTeammates: number;
+  totalDamageTaken: number;
+  totalEnemyJungleMinionsKilled: number;
+  totalHeal: number;
+  totalHealsOnTeammates: number;
+  totalMinionsKilled: number;
+  totalTimeCCDealt: number;
+  totalTimeSpentDead: number;
+  totalUnitsHealed: number;
+  tripleKills: number;
+  trueDamageDealt: number;
+  trueDamageDealtToChampions: number;
+  trueDamageTaken: number;
+  turretKills: number;
+  turretTakedowns: number;
+  turretsLost: number;
+  unrealKills: number;
+  visionClearedPings: number;
+  visionScore: number;
+  visionWardsBoughtInGame: number;
+  wardsKilled: number;
+  wardsPlaced: number;
+  win: boolean;
 }
-interface Inhibitor {
-    first: boolean;
-    kills: number;
+
+interface Perks {
+  statPerks: StatPerks;
+  styles: Style[];
 }
-interface RiftHerald {
-    first: boolean;
-    kills: number;
+
+interface Style {
+  description: string;
+  selections: Selection[];
+  style: number;
 }
-interface Tower {
-    first: boolean;
-    kills: number;
+
+interface Selection {
+  perk: number;
+  var1: number;
+  var2: number;
+  var3: number;
 }
-interface Objectives {
-    baron: Baron;
-    champion: Champion;
-    dragon: Dragon;
-    inhibitor: Inhibitor;
-    riftHerald: RiftHerald;
-    tower: Tower;
+
+interface StatPerks {
+  defense: number;
+  flex: number;
+  offense: number;
 }
-interface Team {
-    bans: Ban[];
-    objectives: Objectives;
-    teamId: number;
-    win: boolean;
+
+interface Missions {
+  playerScore0: number;
+  playerScore1: number;
+  playerScore10: number;
+  playerScore11: number;
+  playerScore2: number;
+  playerScore3: number;
+  playerScore4: number;
+  playerScore5: number;
+  playerScore6: number;
+  playerScore7: number;
+  playerScore8: number;
+  playerScore9: number;
 }
-interface Info {
-    gameCreation: number;
-    gameDuration: number;
-    gameEndTimestamp: number;
-    gameId: number;
-    gameMode: string;
-    gameName: string;
-    gameStartTimestamp: number;
-    gameType: string;
-    gameVersion: string;
-    mapId: number;
-    participants: Participant[];
-    platformId: string;
-    queueId: number;
-    teams: Team[];
-    tournamentCode: string;
+
+interface Challenges {
+  "12AssistStreakCount": number;
+  abilityUses: number;
+  acesBefore15Minutes: number;
+  alliedJungleMonsterKills: number;
+  baronTakedowns: number;
+  blastConeOppositeOpponentCount: number;
+  bountyGold: number;
+  buffsStolen: number;
+  completeSupportQuestInTime: number;
+  controlWardsPlaced: number;
+  damagePerMinute: number;
+  damageTakenOnTeamPercentage: number;
+  dancedWithRiftHerald: number;
+  deathsByEnemyChamps: number;
+  dodgeSkillShotsSmallWindow: number;
+  doubleAces: number;
+  dragonTakedowns: number;
+  earlyLaningPhaseGoldExpAdvantage: number;
+  effectiveHealAndShielding: number;
+  elderDragonKillsWithOpposingSoul: number;
+  elderDragonMultikills: number;
+  enemyChampionImmobilizations: number;
+  enemyJungleMonsterKills: number;
+  epicMonsterKillsNearEnemyJungler: number;
+  epicMonsterKillsWithin30SecondsOfSpawn: number;
+  epicMonsterSteals: number;
+  epicMonsterStolenWithoutSmite: number;
+  firstTurretKilled: number;
+  flawlessAces: number;
+  fullTeamTakedown: number;
+  gameLength: number;
+  getTakedownsInAllLanesEarlyJungleAsLaner?: number;
+  goldPerMinute: number;
+  hadOpenNexus: number;
+  highestCrowdControlScore?: number;
+  immobilizeAndKillWithAlly: number;
+  initialBuffCount: number;
+  initialCrabCount: number;
+  jungleCsBefore10Minutes: number;
+  junglerTakedownsNearDamagedEpicMonster: number;
+  kTurretsDestroyedBeforePlatesFall: number;
+  kda: number;
+  killAfterHiddenWithAlly: number;
+  killParticipation: number;
+  killedChampTookFullTeamDamageSurvived: number;
+  killingSprees: number;
+  killsNearEnemyTurret: number;
+  killsOnOtherLanesEarlyJungleAsLaner?: number;
+  killsOnRecentlyHealedByAramPack: number;
+  killsUnderOwnTurret: number;
+  killsWithHelpFromEpicMonster: number;
+  knockEnemyIntoTeamAndKill: number;
+  landSkillShotsEarlyGame: number;
+  laneMinionsFirst10Minutes: number;
+  laningPhaseGoldExpAdvantage: number;
+  legendaryCount: number;
+  legendaryItemUsed: number[];
+  lostAnInhibitor: number;
+  maxCsAdvantageOnLaneOpponent: number;
+  maxKillDeficit: number;
+  maxLevelLeadLaneOpponent: number;
+  mejaisFullStackInTime: number;
+  moreEnemyJungleThanOpponent: number;
+  multiKillOneSpell: number;
+  multiTurretRiftHeraldCount: number;
+  multikills: number;
+  multikillsAfterAggressiveFlash: number;
+  outerTurretExecutesBefore10Minutes: number;
+  outnumberedKills: number;
+  outnumberedNexusKill: number;
+  perfectDragonSoulsTaken: number;
+  perfectGame: number;
+  pickKillWithAlly: number;
+  playedChampSelectPosition?: number;
+  poroExplosions: number;
+  quickCleanse: number;
+  quickFirstTurret: number;
+  quickSoloKills: number;
+  riftHeraldTakedowns: number;
+  saveAllyFromDeath: number;
+  scuttleCrabKills: number;
+  skillshotsDodged: number;
+  skillshotsHit: number;
+  snowballsHit: number;
+  soloBaronKills: number;
+  soloKills: number;
+  stealthWardsPlaced: number;
+  survivedSingleDigitHpCount: number;
+  survivedThreeImmobilizesInFight: number;
+  takedownOnFirstTurret: number;
+  takedowns: number;
+  takedownsAfterGainingLevelAdvantage: number;
+  takedownsBeforeJungleMinionSpawn: number;
+  takedownsFirstXMinutes: number;
+  takedownsInAlcove: number;
+  takedownsInEnemyFountain: number;
+  teamBaronKills: number;
+  teamDamagePercentage: number;
+  teamElderDragonKills: number;
+  teamRiftHeraldKills: number;
+  tookLargeDamageSurvived: number;
+  turretPlatesTaken: number;
+  turretTakedowns: number;
+  turretsTakenWithRiftHerald: number;
+  twentyMinionsIn3SecondsCount: number;
+  twoWardsOneSweeperCount: number;
+  unseenRecalls: number;
+  visionScoreAdvantageLaneOpponent: number;
+  visionScorePerMinute: number;
+  wardTakedowns: number;
+  wardTakedownsBefore20M: number;
+  wardsGuarded: number;
+  junglerKillsEarlyJungle?: number;
+  killsOnLanersEarlyJungleAsJungler?: number;
+  controlWardTimeCoverageInRiverOrEnemyHalf?: number;
+  fasterSupportQuestCompletion?: number;
+  baronBuffGoldAdvantageOverThreshold?: number;
+  earliestBaron?: number;
+  firstTurretKilledTime?: number;
+  shortestTimeToAceFromFirstTakedown?: number;
+  soloTurretsLategame?: number;
+  earliestDragonTakedown?: number;
+  teleportTakedowns?: number;
+  highestWardKills?: number;
+  highestChampionDamage?: number;
 }
-export interface MatchDTO {
-    metadata: Metadata;
-    info: Info;
+
+interface Metadata {
+  dataVersion: string;
+  matchId: string;
+  participants: string[];
 }
-export {};
-//# sourceMappingURL=match.d.ts.map
